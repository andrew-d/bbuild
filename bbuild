#!/usr/bin/env bash


set -e              # Abort when a command exists with a non-zero exit status
set -o pipefail     # Cause a pipeline to return the exit status of the last
                    # command that returned a non-zero return value.
set -u              # Attempting to use an undefined variable will print an
                    # error and exit the program.


######################################################################
# Variable Names
#
# The naming conventions of variables in this script is fairly simple:
# script-global variables should be prefixed with `bb_` and be all
# lower-case, and global exported variables should be prefixed with
# `BBUILD_` and be all upper-case.  Function local variables can have
# any prefix or name, but should be all lower-case.
#
#
# Global Variables
#
# This list contains a description of all global variables and what
# they mean.
#
# +------------------------+---------------------------------------------+
# |          NAME          | DESCRIPTION                                 |
# +------------------------+---------------------------------------------+
# | bb_program             | The name of this script                     |
# | bb_program_path        | The full path of this script                |
# | bb_program_version     | The version of this script                  |
# | bb_base_dir            | Base directory for performing the build in  |
# | bb_cache_dir           | Directory used for storing cache of sources |
# |                        | specifications for library recipes          |
# | bb_out_dir             | Output directory for final build products   |
# | bb_recipes_dir         | Directory that contains all recipes         |
# | bb_rebuild             | Should we rebuild dependencies              |
# +------------------------+---------------------------------------------+
# | BBUILD_SOURCE_DIR      | Per-recipe directory that contains sources  |
# | BBUILD_CROSS_PREFIX    | Cross-compilation prefix                    |
# | BBUILD_DEPCONF_DIR     | Directory that stores environment variable  |
# | BBUILD_TARGET_PLATFORM | Target platform for this build              |
# | BBUILD_TARGET_ARCH     | Target architecture for this build          |
# | BBUILD_HOST_PLATFORM   | Host platform                               |
# | BBUILD_HOST_ARCH       | Host architecture                           |
# | BBUILD_STATIC_FLAGS    | Flag(s) that can be passed to a C or C++    |
# |                        | compiler in order to compile statically     |
# +------------------------+---------------------------------------------+
#
######################################################################


# Global script information.
bb_program=${0##*/}
bb_program_path="$0"
bb_program_version=0.0.1
declare -i bb_verbosity=2
declare -a bb_build_order

# Default variables.
BBUILD_HOST_PLATFORM=$(uname | tr '[:upper:]' '[:lower:]')
BBUILD_HOST_ARCH=$(uname -m | tr '[:upper:]' '[:lower:]')
BBUILD_TARGET_PLATFORM=linux
BBUILD_TARGET_ARCH=x86_64


# Color definitions (start as 'on').
NORMAL="\033[1;0m"
##STRONG="\033[1;1m"
RED="\033[1;31m"
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
BLUE="\033[1;34m"
MAGENTA="\033[1;35m"
WHITE="\033[1;37m"


######################################################################
# Enable / disable colors in the program.
#
# Globals:
#   None
#
# Arguments:
#   $1 = 'on' or 'off'
#
# Returns:
#   None
######################################################################
function set_colors() {
  case "$1" in
    on)
      NORMAL="\033[1;0m"
      ##STRONG="\033[1;1m"
      RED="\033[1;31m"
      GREEN="\033[1;32m"
      YELLOW="\033[1;33m"
      BLUE="\033[1;34m"
      MAGENTA="\033[1;35m"
      WHITE="\033[1;37m"
      ;;
    off)
      NORMAL=""
      ##STRONG=""
      RED=""
      GREEN=""
      YELLOW=""
      BLUE=""
      MAGENTA=""
      WHITE=""
      ;;
  esac
}


######################################################################
# Various helper log functions.
#
# Globals:
#   $bb_verbosity = verboseness level
#
#   Note: bb_verbosity levels
#       debug   = 1
#       info    = 2
#       warning = 3
#       error   = 4 (always printed)
#
# Arguments:
#   $1 = string
#
# Returns:
#   None
######################################################################
function debug() {
  [[ "$bb_verbosity" -gt 1 ]] && return
  local prompt="${MAGENTA}==> DEBUG:${NORMAL}"
  printf "${prompt} ${WHITE}%s${NORMAL}\n" "$1" >&2
}

function info() {
  [[ "$bb_verbosity" -gt 2 ]] && return
  local prompt="${GREEN}==>${NORMAL}"
  printf "${prompt} ${WHITE}%s${NORMAL}\n" "$1" >&2
}

function info2() {
  [[ "$bb_verbosity" -gt 2 ]] && return
  local prompt="${BLUE}  ->${NORMAL}"
  printf "${prompt} ${WHITE}%s${NORMAL}\n" "$1" >&2
}

function warn() {
  [[ "$bb_verbosity" -gt 3 ]] && return
  local prompt="${YELLOW}==> WARNING:${NORMAL}"
  printf "${prompt} ${WHITE}%s${NORMAL}\n" "$1" >&2
}

function error() {
  local prompt="${RED}==> ERROR:${NORMAL}"
  printf "${prompt} ${WHITE}%s${NORMAL}\n" "$1" >&2
}

function die() {
  error "$1"
  exit 1
}


######################################################################
# Fetches a given URL and saves it as the given file.
#
# Globals:
#   None
#
# Arguments:
#   $1 = url
#   $2 = target file
#
# Returns:
#   0 on success, 1 on failure
######################################################################
function fetch_url() {
  local url="$1"
  local target="$2"

  local quiet_args
  if [[ "$bb_verbosity" -gt 2 ]]; then
    quiet_args=-s
  fi

  # TODO: fall back to wget if curl not present
  curl -L ${quiet_args:-} -o "$target" "$url" || exit 1
  return 0
}


######################################################################
# Detects whether a given source is remote (i.e. whether the source
# is on the local filesystem or should be fetched from a remote
# location).
#
# Globals:
#   None
#
# Arguments:
#   $1 = source specification
#
# Returns:
#   0/true if the source is remote, 1/false if it is not
######################################################################
function is_remote() {
  local src="$1"

  case "${src#*::}" in
    http://*|ftp://*|https://*)
      return 0
      ;;
  esac

  return 1
}


######################################################################
# Gets the filename from a given source  If the source is prefixed
# with a 'filename::<url>', the 'filename' portion will be used
# instead of anything from the URL.
#
# Globals:
#   None
#
# Arguments:
#   $1 = source
#
# Returns:
#   0 always
#
# Stdout:
#   The filename from the given source
######################################################################
function filename_from_source() {
  local src="$1"

  # Get everything after the last slash.  Equivalent to $(basename $url).
  local filename="${src##*/}"

  # If there is a '::' in the source, we take everything before it.
  case "$src" in
    *::*) filename=${src%%::*};;
  esac

  # Output
  echo "$filename"
  return 0
}


######################################################################
# Gets the URL from a given source  If the source is prefixed with a
# 'filename::<url>', the 'filename' portion will be stripped.
#
# Globals:
#   None
#
# Arguments:
#   $1 = source
#
# Returns:
#   0 always
#
# Stdout:
#   The URL from the given source
######################################################################
function url_from_source() {
  local src="$1"
  local url="$src"

  # If there is a '::' in the source, we take everything after it.
  case "$src" in
    *::*) url=${src##*::};;
  esac

  # Output
  echo "$url"
  return 0
}


######################################################################
# Downloads all given sources into the specified target directory.
# Local file sources are symlinked into the target directory.
#
# Globals:
#   $bb_cache_dir  = the cache directory for downloaded sources
#
# Arguments:
#   $1 = target directory
#   $2 = directory for this recipe
#
# Returns:
#   0 on success, 1 on failure
######################################################################
function default_fetch() {
  local target_dir="$1"
  local recipe_dir="$2"
  shift 2

  #declare -ar sources=("${@}")
  local filename filepath url

  debug "Have ${#sources[@]} source(s) to fetch"

  # Avoid an 'unbound variable' array when a recipe has no sources.
  if [[ ${#sources[@]} -eq 0 ]]; then
    return 0
  fi

  local i src checksum filesum
  for i in $(seq 0 $((${#sources[@]} - 1))); do
    src="${sources[$i]}"
    checksum="${sums[$i]}"

    filename=$(filename_from_source "$src")
    filepath="$target_dir"/"$filename"

    # If the file doesn't already exist...
    if [[ ! -e "$filepath" ]]; then
      info "Fetching source: $src"

      if is_remote "$src"; then
        url=$(url_from_source "$src")

        # Only fetch the given URL if it doesn't exist in our cache.
        if [[ ! -e "$bb_cache_dir"/"$filename" ]]; then
          fetch_url "$url" "$bb_cache_dir"/"$filename" || return 1
        else
          info2 "Skipping - already downloaded"
        fi

        ln -sf "$bb_cache_dir"/"$filename" "$target_dir"/ || return 1
      else
        info2 "Source is local"
        ln -sf "$recipe_dir/$src" "$target_dir"/ || return 1
      fi
    fi

    # Verify the hash on the file.
    filesum=$(sha256sum < "$filepath" | sed -rn 's/^([a-f0-9]+).*$/\1/p')

    if [[ "$filesum" == "$checksum" ]]; then
      continue
    fi

    if [[ $checksum == "SKIP" ]]; then
      if is_remote "$src"; then
        warn "Cannot skip non-local source: $src"
      else
        info2 "Skipping hash check on local file"
        continue
      fi
    fi

    error "Hash of source $filename does not match (actual: $filesum)"
    error "The source and cached file on-disk will be deleted."
    error "Rebuilding will re-download the file, which in some cases may fix the problem"

    info2 "Deleting: $filepath"
    rm "$filepath"

    if is_remote "$src"; then
      info2 "Deleting: $bb_cache_dir/$filename"
      rm "$bb_cache_dir"/"$filename"
    fi

    return 1
  done

  return 0
}


######################################################################
# Default 'fetch' implementation that simply takes the global, recipe-
# defined 'sources' variable and passes it to default_fetch.
#
# Globals:
#   $bb_recipes_dir    = the recipes directory
#   $BBUILD_SOURCE_DIR = the cache directory for downloaded sources
#   $pkgname           = defined package name
#   $sources           = defined sources array
#
# Arguments:
#   None
#
# Returns:
#   0 on success, 1 on failure
######################################################################
function fetch() {
  mkdir -p "$BBUILD_SOURCE_DIR"

  # fetch <into> <recipe source directory> <source 1> <source 2>...
  default_fetch \
    "$BBUILD_SOURCE_DIR" \
    "$bb_recipes_dir"/"$pkgname" \
    "${sources[@]}" \
    || return 1

  return 0
}


######################################################################
# Given a directory and an array of sources, will extract the filename
# from each source and check to see if it needs to be unpacked.
# If so, it will extract the given archive within the given input
# directory.
#
# Globals:
#   None
#
# Arguments:
#   $1 = directory in which the sources are stored
#   $2 ... = sources
#
# Returns:
#   0 on success, 1 on failure
######################################################################
function default_unpack() {
  local in_dir="$1"
  shift

  declare -ar sources=("${@}")

  mkdir -p "$in_dir"

  info "Unpacking..."
  for u in "${sources[@]}"; do
    local fname fpath
    fname=$(filename_from_source "$u")
    fpath="$in_dir"/"$fname"

    # Sanity check
    if [[ ! -e "$fpath" ]]; then
      error "Source '${fname}' does not exist in ${in_dir}!"
      return 1
    fi

    case "$fpath" in
      *.tar)
        info2 "Unpacking $fname..."
        tar -C "$in_dir" -xf "$fpath" || return 1
        ;;
      *.tar.gz|*.tgz)
        info2 "Unpacking $fname..."
        tar -C "$in_dir" -zxf "$fpath" || return 1
        ;;
      *.tar.bz2)
        info2 "Unpacking $fname..."
        tar -C "$in_dir" -jxf "$fpath" || return 1
        ;;
      *.tar.lzma)
        info2 "Unpacking $fname..."
        unlzma -c "$fpath" | tar -C "$in_dir" -x || return 1
        ;;
      *.tar.xz)
        info2 "Unpacking $fname..."
        unxz -c "$fpath" | tar -C "$in_dir" -x || return 1
        ;;
      *.zip)
        info2 "Unpacking $fname..."
        unzip "$fpath" -d "$in_dir" || return 1
        ;;
    esac
  done

  return 0
}


######################################################################
# Default 'unpack' implementation that simply takes the global,
# recipe-defined 'sources' variable and passes it to default_unpack.
#
# Globals:
#   $BBUILD_SOURCE_DIR = the cache directory for downloaded sources
#   $sources           = defined sources array
#
# Arguments:
#   None
#
# Returns:
#   0 on success, 1 on failure
######################################################################
function unpack() {
  default_unpack "$BBUILD_SOURCE_DIR" "${sources[@]}" || return 1

  return 0
}


######################################################################
# Helper function that sources the environment variables for all of
# the dependencies.
# MUST BE RUN WITHIN THE RECIPE CONTEXT.
#
# Globals:
#   $dependencies       = dependencies of this recipe
#   $BBUILD_DEPCONF_DIR = depconf directory
#
# Arguments:
#   None
#
# Returns:
#   0 on success, 1 on failure
######################################################################
function _load_dependency_vars() {
  if [[ ${dependencies:-} ]]; then
    # Source all dependency environment variables.
    for dep in "${dependencies[@]}"; do
      local env_vars var_file
      env_vars=$(find "$BBUILD_DEPCONF_DIR"/"$dep" -type f -print0 | xargs -0 -n1 basename)

      for var in $env_vars; do
        # Skip dotfiles
        if [[ $var == .* ]]; then
          continue
        fi

        var_file="$BBUILD_DEPCONF_DIR"/"$dep"/"$var"

        # The ${!var} syntax says 'read the environment variable with the
        # name that is the content of the var variable'.  This line should
        # set $var to the value of $var plus the variables from the file.
        export $var="${!var:-} $(cat "$var_file")"
      done
    done
  fi

  return 0
}


######################################################################
# Checks whether the given recipe exists.
#
# Globals:
#   $bb_recipes_dir = the recipes directory
#
# Arguments:
#   $1 = recipe name to check
#
# Returns:
#   0 if it exists, 1 otherwise
######################################################################
function check_recipe_exists() {
  local recipe_name="$1"
  local recipe_dir="$bb_recipes_dir"/"$recipe_name"

  if [[ ! -d "$recipe_dir" ]]; then
    error "Recipe '$recipe_name' does not exist!"
    return 1
  fi

  if [[ ! -s "${recipe_dir}/build.sh" ]]; then
    error "Recipe '$recipe_name' exists, but 'build.sh' is missing!"
    return 1
  fi

  return 0
}


######################################################################
# Starts the builds for the given recipe.
#
# Globals:
#   $bb_base_dir    = the build directory
#   $bb_recipes_dir = the recipes directory
#
# Arguments:
#   $1 = recipe name to build
#
# Returns:
#   0 on success, 1 on failure
######################################################################
function run_build() {
  local recipe_name="$1"

  check_recipe_exists "$recipe_name" || return 1
  # TODO: validate the recipe

  local this_recipe_dir="$bb_recipes_dir"/"$recipe_name"
  local srcdir="$bb_base_dir"/"$recipe_name"
  local depdir="$BBUILD_DEPCONF_DIR"/"$recipe_name"

  # Check if the depconf directory exists.  If we're not rebuilding
  # dependencies, then this directory existing indicates that the build has
  # been previously completed, and we can skip this build.
  if [[ -d "$depdir" ]]; then
    info "Not rebuilding recipe '$recipe_name'"
    return 0
  fi

  mkdir -p "$srcdir" || return 1
  mkdir -p "$depdir" || return 1

  # Run the remaining commands in a subshell, so we don't pollute the main
  # environment with the source'd variables.
  (
    # Set up variables.
    BBUILD_SOURCE_DIR="$srcdir"
    setup_build_environment || exit 1

    # Load the build script.
    debug "Recipe path = ${this_recipe_dir}"
    source "$this_recipe_dir/build.sh"

    # Get variables from dependencies.
    if [[ ${dependencies:-} ]]; then
      # Source all dependency environment variables.
      _load_dependency_vars || return 1
    fi

    # Run everything in order.
    fetch || exit 1
    unpack || exit 1

    info "Starting prepare()"
    prepare || exit 1

    info "Starting build()"
    build || exit 1

    if [[ "${binary:-}" == "true" ]]; then
      # Each package should copy files to the output directory.  Need to make
      # this here, since it depends on the version.
      declare -xr BBUILD_OUT_DIR="$bb_out_dir"/"$recipe_name"/"$pkgver"/"${BBUILD_TARGET_PLATFORM}-${BBUILD_TARGET_ARCH}"
      mkdir -p "$BBUILD_OUT_DIR" || return 1

      package || exit 1
    fi

    if [[ "${library:-}" == "true" ]]; then
      # Each package should create a environment variable files under
      # $BBUILD_DEP_DIR
      declare -xr BBUILD_DEP_DIR="$depdir"
      setup_env || exit 1
    fi

    info "Finished building: $recipe_name"
    touch "${depdir}/.build-complete"
    exit 0
  )

  return $?
}


######################################################################
# Default do-nothing implementation of prepare()
#
# Globals:
#   None
#
# Arguments:
#   None
#
# Returns:
#   None
######################################################################
function prepare() {
  # Do nothing by default
  debug "No prepare() function specified"
}


######################################################################
# Default do-nothing implementation of package().  Prints a warning.
#
# Globals:
#   None
#
# Arguments:
#   None
#
# Returns:
#   None
######################################################################
function package() {
  warn "package() was called but not overridden"
}


######################################################################
# Default do-nothing implementation of setup_env().  Prints a warning.
#
# Globals:
#   None
#
# Arguments:
#   None
#
# Returns:
#   None
######################################################################
function setup_env() {
  warn "setup_env() was called but not overridden"
}


######################################################################
# Sets up the global build environment by exporting the standard
# toolchain variables (CC, CXX, LD, etc.), along with setting the
# BBUILD_CROSS_PREFIX and BBUILD_STATIC_FLAGS variables that recipes
# can use.
#
# Globals:
#   None
#
# Arguments:
#   None
#
# Returns:
#   0 on success, 1 on failure
######################################################################
function setup_build_environment() {
  BBUILD_BINARY_EXT=
  case "${BBUILD_TARGET_PLATFORM}-${BBUILD_TARGET_ARCH}" in
    linux-x86_64)
      BBUILD_CROSS_PREFIX=x86_64-linux-musl
      ;;
    linux-arm)
      BBUILD_CROSS_PREFIX=arm-linux-musleabihf
      ;;
    android-*)
      BBUILD_CROSS_PREFIX=arm-linux-musleabihf
      ;;
    darwin-x86_64)
      BBUILD_CROSS_PREFIX=x86_64-apple-darwin12
      ;;
    windows-x86_64)
      BBUILD_CROSS_PREFIX=x86_64-w64-mingw32
      BBUILD_BINARY_EXT=.exe
      ;;
    *)
      error "Cannot determine cross prefix for ${BBUILD_TARGET_PLATFORM}/${BBUILD_TARGET_ARCH}"
      return 1
  esac
  debug "BBUILD_CROSS_PREFIX = $BBUILD_CROSS_PREFIX"
  debug "BBUILD_BINARY_EXT   = $BBUILD_BINARY_EXT"

  # Make everything readonly
  readonly BBUILD_HOST_PLATFORM BBUILD_HOST_ARCH
  readonly BBUILD_CROSS_PREFIX BBUILD_BINARY_EXT

  # Set up build tools with prefixes
  export AR="${BBUILD_CROSS_PREFIX}-ar"
  export CC="${BBUILD_CROSS_PREFIX}-gcc"
  export CXX="${BBUILD_CROSS_PREFIX}-g++"
  export LD="${BBUILD_CROSS_PREFIX}-ld"
  export RANLIB="${BBUILD_CROSS_PREFIX}-ranlib"
  export STRIP="${BBUILD_CROSS_PREFIX}-strip"

  # Declare static flags
  BBUILD_STATIC_FLAGS=" -static "
  case "${BBUILD_TARGET_PLATFORM}-${BBUILD_TARGET_ARCH}" in
    darwin-*)
      BBUILD_STATIC_FLAGS=" -flto -O3 -mmacosx-version-min=10.6 "
      ;;
  esac
  readonly BBUILD_STATIC_FLAGS

  # Special-case for cross-compiling to darwin.
  if [[ "$BBUILD_TARGET_PLATFORM" = "darwin" ]]; then
    export CC="${BBUILD_CROSS_PREFIX}-clang"
    export CXX="${BBUILD_CROSS_PREFIX}-clang++"
    declare -xr OSXCROSS_NO_INCLUDE_PATH_WARNINGS=1
  fi
}


######################################################################
# Runs ourself with the same command-line options that we were given.
#
# Globals:
#   $bb_base_dir    = the build directory
#   $bb_recipes_dir = the recipe directory
#   $bb_out_dir     = the output directory
#   $bb_verbosity   = verboseness level
#
# Arguments:
#   $@  = arguments to pass to ourself
#
# Returns:
#   Exit status of the run process
######################################################################
function run_self() {
  local args

  args=""
  args+="-a ${BBUILD_TARGET_ARCH} "
  args+="-b ${bb_base_dir} "
  args+="-o ${bb_out_dir} "
  args+="-p ${BBUILD_TARGET_PLATFORM} "
  args+="-r ${bb_recipes_dir}"

  if [[ -z "$RED" ]]; then
    args="$args -m"
  fi

  case $bb_verbosity in
    0)
      args="$args -v"
      ;;
    1)
      # Do nothing - default
      ;;
    2)
      args="$args -q"
      ;;
    3)
      args="$args -q -q"
      ;;
  esac

  debug "Running self with: ${bb_program_path} ${args} $*"
  ${bb_program_path} ${args} $@
  return $?
}


# Given a recipe name, will return the dependencies for that recipe.
# Run it in a subshell.
# TODO: real documentation
function _get_dependencies_one() {
  local recipe="$1"
  local recipe_dir="$bb_recipes_dir"/"$recipe"

  # Set up variables.
  BBUILD_SOURCE_DIR="$bb_base_dir"/"$recipe"
  setup_build_environment || exit 1

  # Load dependency recipe.
  source "$recipe_dir/build.sh"

  # The recipe depends on itself (this ensures that if we only have one recipe
  # with no dependencies, it gets output.
  echo "$recipe $recipe"

  if [[ ${dependencies:-} ]]; then
    for dep in "${dependencies[@]}"; do
      echo "$dep $recipe"
    done
    echo
  fi

  exit 0
}


# Return the full dependency graph for all deps given in $@
# TODO: real documentation
function get_dependencies() {
  local deps

  deps=""
  for dep in "$@"; do
    local curr_deps

    curr_deps=$(_get_dependencies_one "$dep")
    if [[ ! $? ]]; then
      return 1
    fi
    deps="$deps $curr_deps"
  done

  declare -r order=$(echo "$deps" | sed '/^#/d' | tsort)
  if [[ ! $? ]]; then
    error "Dependency cycle, halting build"
    return 1
  fi

  bb_dependency_order=( $order )
  return 0
}

######################################################################
# Prints the usage for this script.
#
# Globals:
#   $bb_program         = the name of this script
#   $bb_program_version = our version
#   $bb_base_dir        = the build directory
#   $bb_recipes_dir     = the recipe directory
#
# Arguments:
#   None
#
# Returns:
#   None
######################################################################
function usage() {
  echo "$bb_program $bb_program_version"
  cat <<EOF
usage: $bb_program [options] <recipe(s)>

options:
  -a ARCH   Set the target architecture (default: $BBUILD_TARGET_ARCH)
  -b DIR    Set the build directory (default: $bb_base_dir)
  -h        Print this help
  -k        Don't rebuild dependencies
  -m        Monochrome - disable colors.
  -o DIR    Set the output directory (default: $bb_out_dir)
  -p PLAT   Set the target platform (default: $BBUILD_TARGET_PLATFORM)
  -q        Be more quiet
  -r DIR    Set the recipes directory (default: $bb_recipes_dir)
  -v        Be more verbose
EOF
  exit 0
}


function main() {
  # Only proceed further if we aren't testing.
  if [[ -n "${BBUILD_TESTING:-}" ]]; then
    # Don't exit, but just return.
    return 0
  fi

  # Disable colors if stderr isn't a terminal.
  if [[ ! -t 2 ]]; then
    set_colors "off"
  fi

  # Default values of variables
  bb_base_dir=$(pwd)/build
  bb_recipes_dir=$(pwd)/recipes
  bb_out_dir=$(pwd)/out
  bb_rebuild=yes

  # Parse arguments
  while getopts ":a:b:hkmo:p:qr:v" opt; do
    case $opt in
      a)
        BBUILD_TARGET_ARCH="$OPTARG"
        ;;
      b)
        bb_base_dir="$OPTARG"
        ;;
      h)
        usage
        ;;
      k)
        bb_rebuild=no
        ;;
      m)
        set_colors "off"
        ;;
      o)
        bb_out_dir="$OPTARG"
        ;;
      p)
        BBUILD_TARGET_PLATFORM="$OPTARG"
        ;;
      q)
        bb_verbosity=$(( bb_verbosity + 1 ))
        ;;
      r)
        bb_recipes_dir="$OPTARG"
        ;;
      v)
        bb_verbosity=$(( bb_verbosity - 1 ))
        ;;
      \?)
        error "Invalid option: -$OPTARG"
        return 1
        ;;
      :)
        error "Option -$OPTARG requires an argument."
        return 1
        ;;
    esac
  done

  # Remove all flags, just leaving our arguments.
  shift $((OPTIND - 1))

  # Mark variables as read-only, and compute derived variables
  readonly bb_base_dir bb_rebuild bb_recipes_dir bb_verbosity
  readonly BBUILD_TARGET_PLATFORM BBUILD_TARGET_ARCH

  bb_cache_dir="$bb_base_dir"/.cache
  BBUILD_DEPCONF_DIR="$bb_base_dir"/.depconf
  readonly bb_cache_dir BBUILD_DEPCONF_DIR

  # Help!
  debug "Flag parsing finished, have $# packages to build"
  debug "    bb_base_dir    = ${bb_base_dir}"
  debug "    bb_cache_dir   = ${bb_cache_dir}"
  debug "    bb_out_dir     = ${bb_out_dir}"
  debug "    bb_rebuild     = ${bb_rebuild}"
  debug "    bb_recipes_dir = ${bb_recipes_dir}"
  debug "    bb_verbosity   = ${bb_verbosity}"
  debug "    BBUILD_DEPCONF_DIR     = ${BBUILD_DEPCONF_DIR}"
  debug "    BBUILD_TARGET_PLATFORM = ${BBUILD_TARGET_PLATFORM}"
  debug "    BBUILD_TARGET_ARCH     = ${BBUILD_TARGET_ARCH}"

  # SIGINT handling - print a nice message
  trap 'die "Aborted by user"' INT

  # Create necessary directories
  for dir in "$bb_base_dir" "$bb_cache_dir" "$bb_out_dir" "$BBUILD_DEPCONF_DIR"; do
    mkdir -p "$dir" || return 1
  done

  # Calculate the dependency graph
  info "Calculating dependencies..."
  get_dependencies "$@" || return 1

  # This just joins all dependencies with ", "
  declare -r niceorder=$(printf "%s, " "${bb_dependency_order[@]}" | cut -d "," -f 1-${#bb_dependency_order[@]})
  debug "Building libraries in the order: $niceorder"

  # If we're rebuilding, we blow away the build and depconf directories for the
  # given dependencies, which will force them to be rebuilt.
  declare -a clean_recipes=()
  if [[ "$bb_rebuild" == "yes" ]]; then
    clean_recipes=( "${bb_dependency_order[@]}" )
  else
    # We're not rebuilding, but we do want to clean the directories for all
    # explicitly-specified recipes, so those will be rebuilt.
    clean_recipes=( "$@" )

    # Also, clean all recipes that don't have the 'build succeeded' flag set.
    for arg in "${bb_dependency_order[@]}"; do
      # If the depconf directory doesn't exist, no need to clean.
      if [[ ! -d "${BBUILD_DEPCONF_DIR}/${arg}" ]]; then
        continue
      fi

      if [[ ! -e "${BBUILD_DEPCONF_DIR}/${arg}/.build-complete" ]]; then
        warn "Cleaning recipe '$arg' since a previous build did not complete"
        clean_recipes=( "${clean_recipes[@]}" "${arg}" )
      fi
    done
  fi

  # Actually do the cleaning.
  local rbasedir rdepdir
  for arg in "${clean_recipes[@]}"; do
    rbasedir="${bb_base_dir}/${arg}"
    rdepdir="${BBUILD_DEPCONF_DIR}/${arg}"

    debug "Removing build directory: $rbasedir"
    rm -rf "$rbasedir"

    debug "Removing depconf dir: $rdepdir"
    rm -rf "$rdepdir"
  done

  # Actually build
  for arg in "${bb_dependency_order[@]}"; do
    info "Building: $arg"

    run_build "$arg"
    if [[ ! $? ]]; then
      debug "Recipe failed - exiting..."
      return 1
    fi
  done

  info "Finished building ${#bb_dependency_order[@]} recipe(s)"
}

# Call main function
main "$@"
exit $?


# vim: set tabstop=2 shiftwidth=2 textwidth=0 expandtab:
